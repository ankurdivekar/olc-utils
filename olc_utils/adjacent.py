# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_adjacent.ipynb.

# %% auto 0
__all__ = ['get_adjacent_grids', 'get_grids_within_radius']

# %% ../nbs/01_adjacent.ipynb 3
import pandas as pd
from openlocationcode import openlocationcode as olc
from .grid import *
from typing import Tuple
import itertools

# %% ../nbs/01_adjacent.ipynb 4
def get_adjacent_grids(
    grid: str,  # OLC code to get the neighbours of
    radius: int = 1,  # Radius of the grid to get the neighbours of (default 1)
) -> Tuple[
    str
]:  # Tuple of 8 OLC codes, starting from the NW corner and going clockwise
    if grid is None:
        return None
    # TODO: implement radius based logic
    NW = get_olc_with_offsets(grid, -1, 1)
    N = get_olc_with_offsets(grid, 0, 1)
    NE = get_olc_with_offsets(grid, 1, 1)
    E = get_olc_with_offsets(grid, 1, 0)
    SE = get_olc_with_offsets(grid, 1, -1)
    S = get_olc_with_offsets(
        grid,
        0,
        -1,
    )
    SW = get_olc_with_offsets(grid, -1, -1)
    W = get_olc_with_offsets(grid, -1, 0)

    return NW, N, NE, E, SE, S, SW, W

# %% ../nbs/01_adjacent.ipynb 7
def get_grids_within_radius(
    grid: str,  # OLC code to get the neighbours of
    radius: int = 1,  # Radius of the grid to get the neighbours of (default 1)
) -> Tuple[str]:  # Tuple of OLC codes within radius
    if grid is None:
        return None

    return [
        get_olc_with_offsets(grid, i, j)
        for j, i in itertools.product(
            range(-radius, radius + 1), range(-radius, radius + 1)
        )
        if abs(i) + abs(j) <= radius
    ]
