# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_sweep.ipynb.

# %% auto 0
__all__ = ['get_max_min_chars', 'get_four_corner_grids', 'get_all_olc_between_grids']

# %% ../nbs/02_sweep.ipynb 3
import pandas as pd
from openlocationcode import openlocationcode as olc
from .grid import *
from typing import Tuple

# %% ../nbs/02_sweep.ipynb 5
def get_max_min_chars(
    str1: str,
    str2: str,
) -> Tuple[str, str]:
    max_str = ""
    min_str = ""

    for i in range(len(str1)):
        if str1[i] == str2[i]:
            max_str += str1[i]
            min_str += str1[i]

        elif olc.CODE_ALPHABET_.index(str1[i]) > olc.CODE_ALPHABET_.index(str2[i]):
            max_str += str1[i:]
            min_str += str2[i:]

            break
        else:
            max_str += str2[i:]
            min_str += str1[i:]

            break

    return (
        max_str,
        min_str,
    )

# %% ../nbs/02_sweep.ipynb 8
def get_four_corner_grids(
    grid1: str,
    grid2: str,
) -> Tuple[str, str]:
    if len(grid1) != len(grid2):
        raise ValueError("Grids must be of the same length")

    # Get the characters for X axis
    x_grid_1, y_grid_1 = olc_to_xy_chars(grid1)
    x_grid_2, y_grid_2 = olc_to_xy_chars(grid2)
    
    # Calculate the X max & min characters
    x_max_grid, x_min_grid = get_max_min_chars(x_grid_1, x_grid_2)
    y_max_grid, y_min_grid = get_max_min_chars(y_grid_1, y_grid_2)

    left_bottom = xy_chars_to_olc(x_min_grid, y_min_grid)
    left_top = xy_chars_to_olc(x_min_grid, y_max_grid)
    right_top = xy_chars_to_olc(x_max_grid, y_max_grid)
    right_bottom = xy_chars_to_olc(x_max_grid, y_min_grid)

    return left_bottom, left_top, right_top, right_bottom

# %% ../nbs/02_sweep.ipynb 11
def get_all_olc_between_grids(
    grid1: str,
    grid2: str,
) -> pd.DataFrame:
    # Get the four corners of the grids
    left_bottom, _, right_top, _ = get_four_corner_grids(
        grid1, grid2
    )

    # Get X and Y offsets
    x_offset, y_offset = get_offsets_between_grids(left_bottom, right_top)

    # Get all the grids between the two grids
    all_olc = []

    for j in range(y_offset + 1):
        all_olc.extend(
            get_olc_with_offsets(left_bottom, i, j)
            for i in range(x_offset + 1)
        )
    return all_olc
