# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_grid.ipynb.

# %% auto 0
__all__ = ['get_valid_olc_code', 'get_flat_olc_code', 'get_olc_grid_centroid', 'olc_to_xy_chars', 'xy_chars_to_olc',
           'olc_to_decimal', 'decimal_to_olc', 'get_offsets_between_grids', 'get_olc_with_offsets']

# %% ../nbs/00_grid.ipynb 3
import pandas as pd
from openlocationcode import openlocationcode as olc
from typing import Tuple

# %% ../nbs/00_grid.ipynb 5
def get_valid_olc_code(
    olc_code:str # OLC code to validate
    )->str: # Valid OLC code or None
    # Convert a string to a valid OLC code if possible
    if olc.isValid(olc_code):
        return olc_code
    
    if len(olc_code) == 8:
        olc_tmp = f"{olc_code}+"
        return olc_tmp if olc.isValid(olc_tmp) else None
    
    if len(olc_code) > 8:
        olc_tmp = f"{olc_code[:8]}+{olc_code[8:]}"
        return olc_tmp if olc.isValid(olc_tmp) else None
    
    return None

def get_flat_olc_code(
    olc_code:str # OLC code to convert
    )->str: # Valid OLC code without the + 
    
    return olc_code.replace("+", "")

# %% ../nbs/00_grid.ipynb 9
def get_olc_grid_centroid(
    olc_code: str   # OLC code to get centroid for
    ) -> Tuple[float, float]: # Latitude and longitude of centroid
    if olc_code := get_valid_olc_code(olc_code):
        g = olc.decode(olc_code)
        return g.latitudeCenter, g.longitudeCenter
    return None, None

# %% ../nbs/00_grid.ipynb 13
def olc_to_xy_chars(
    grid: str,
) -> Tuple[str, str]:
    x_chars = "".join([x for i, x in enumerate(grid) if i % 2 == 1])
    y_chars = "".join([x for i, x in enumerate(grid) if i % 2 == 0])

    return x_chars, y_chars


def xy_chars_to_olc(
    x_chars: str,
    y_chars: str,
) -> str:
    return "".join("".join(tup) for tup in zip(y_chars, x_chars))

# %% ../nbs/00_grid.ipynb 15
def olc_to_decimal(grid):
    return sum(
        pow(20, i) * olc.CODE_ALPHABET_.index(digit)
        for i, digit in enumerate(grid[::-1])
    )

# %% ../nbs/00_grid.ipynb 17
def decimal_to_olc(decimal):
    grid = ""
    while decimal > 0:
        grid = olc.CODE_ALPHABET_[decimal % 20] + grid
        decimal //= 20
    return grid

# %% ../nbs/00_grid.ipynb 20
def get_offsets_between_grids(
    grid1: str,
    grid2: str,
) -> Tuple[int, int]:
    # Get X and Y axis characters
    x_grid_1, y_grid_1 = olc_to_xy_chars(grid1)
    x_grid_2, y_grid_2 = olc_to_xy_chars(grid2)

    # Get X and Y axis offsets
    x_offset = olc_to_decimal(x_grid_2) - olc_to_decimal(x_grid_1)
    y_offset = olc_to_decimal(y_grid_2) - olc_to_decimal(y_grid_1)

    return x_offset, y_offset

# %% ../nbs/00_grid.ipynb 22
def get_olc_with_offsets(
    grid: str,
    x_offset: int,
    y_offset: int,
) -> str:
    grid = grid.replace("+", "")
    x_grid, y_grid = olc_to_xy_chars(grid)
    x_grid = decimal_to_olc(olc_to_decimal(x_grid) + x_offset)
    y_grid = decimal_to_olc(olc_to_decimal(y_grid) + y_offset)

    return xy_chars_to_olc(x_grid, y_grid)
